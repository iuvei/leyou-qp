{"version":3,"sources":["WebSocket.js"],"names":["WS","cc","Class","extends","Component","statics","ip","port","addr","ws","handlers","fnDisconnect","isPinging","lastSendTime","lastRecieveTime","delay","connected","pingRef","checkRef","addHandler","event","fn","log","handler","data","JSON","parse","connect","fnConnect","fnError","WebSocket","onopen","heartbeat","onmessage","self","Date","now","json","operation","onerror","error","onclose","close","game","on","EVENT_HIDE","ping","setInterval","clearInterval","send","stringify"],"mappings":"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","file":"WebSocket.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["/*\r\nif(window.io == null){\r\n    window.io = require(\"socket.io\");\r\n}\r\n*/\r\nvar WS = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics: {\r\n        ip: null,\r\n        port: null,\r\n        addr: null,\r\n        ws: null,\r\n        handlers: {},\r\n        fnDisconnect: null,\r\n        isPinging: false,\r\n        lastSendTime: 0,\r\n        lastRecieveTime: 0,\r\n        delay: 0,\r\n        connected: false,\r\n        pingRef: null,\r\n        checkRef: null,\r\n        addHandler: function(event, fn) {\r\n            cc.log(\"addHandler....\", event);\r\n            if (this.handlers[event]) {\r\n                cc.log(\"event:\" + event + \"' handler has been registered.\");\r\n                return;\r\n            }\r\n            const handler = function(data) {\r\n                if (event != \"disconnect\" && typeof data == \"string\") {\r\n                    data = JSON.parse(data);\r\n                }\r\n                fn(data);\r\n            };\r\n            this.handlers[event] = handler;\r\n        },\r\n        connect: function(fnConnect, fnError) {\r\n            cc.log(`connect to ${this.addr}`);\r\n            this.ws = new WebSocket(this.addr);\r\n\r\n            this.ws.onopen = event => {\r\n                cc.log(\"WebSocket instance onopen.\", this.ws);\r\n                this.ws.connected = true;\r\n                fnConnect(event.data);\r\n                this.heartbeat();\r\n            };\r\n            this.ws.onmessage = event => {\r\n                let self = this;\r\n                this.lastRecieveTime = Date.now();\r\n                this.delay = this.lastRecieveTime - this.lastSendTime;\r\n                const data = event.data;\r\n                if (\"@\" === data) {\r\n                    cc.log(\"<<<===pong\");\r\n                    return;\r\n                }\r\n                const json = JSON.parse(data);\r\n                this.handlers[json.operation](json);\r\n            };\r\n\r\n            this.ws.onerror = event => {\r\n                cc.log(\"WebSocket instance error.\");\r\n                fnError(error);\r\n            };\r\n            let self = this;\r\n            this.ws.onclose = event => {\r\n                cc.log(\r\n                    \"WebSocket instance closed.\",\r\n                    self.ws === this.ws,\r\n                    this.ws\r\n                );\r\n                this.ws.connected = false;\r\n                this.close();\r\n            };\r\n        },\r\n        heartbeat: function() {\r\n            this.lastRecieveTime = Date.now();\r\n            if (!this.isPinging) {\r\n                this.isPinging = true;\r\n                cc.game.on(cc.game.EVENT_HIDE, () => {\r\n                    cc.log(\"cc.game.EVENT_HIDE\");\r\n                    this.ping();\r\n                });\r\n                //每5秒ping一下服务器\r\n                this.pingRef = setInterval(() => {\r\n                    if (this.ws) {\r\n                        this.ping();\r\n                    }\r\n                }, 2000);\r\n                //每1000毫秒检查一次最后收到消息时间，如果大于10秒就是断开\r\n\r\n                this.checkRef = setInterval(() => {\r\n                    if (this.ws) {\r\n                        if (Date.now() - this.lastRecieveTime > 10000) {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }, 1000);\r\n            }\r\n        },\r\n        close: function() {\r\n            clearInterval(this.pingRef);\r\n            clearInterval(this.checkRef);\r\n            if (this.ws && this.ws.connected) {\r\n                this.ws.connected = false;\r\n                this.ws.close();\r\n            }\r\n            this.ws = null;\r\n            if (this.fnDisconnect) {\r\n                this.fnDisconnect();\r\n                this.fnDisconnect = null;\r\n            }\r\n        },\r\n        send: function(data) {\r\n            if (this.ws && this.ws.connected) {\r\n                if (data && typeof data == \"object\") {\r\n                    data == JSON.stringify(data);\r\n                }\r\n                this.ws.send(data);\r\n            }\r\n        },\r\n        ping: function() {\r\n            if (this.ws) {\r\n                this.lastSendTime = Date.now();\r\n                this.send(\"@\");\r\n                cc.log(\"===>>>ping\");\r\n            }\r\n        }\r\n    }\r\n});\r\n"]}