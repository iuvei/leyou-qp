{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\WebSocketManager.js"],"names":["cc","Class","extends","Component","properties","dataEventHandler","dispatchEvent","event","data","emit","initHandlers","log","th","ws","addHandler","JSON","stringify","result","result_message","rdata","wc","hide","alert","show","token","t","params","operation","timestamp","send","sign","myself","id","account_id","name","nickname","director","loadScene","connectServer","ip","port","namespace","connected","addr","connect","code","args"],"mappings":"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","file":"WebSocketManager.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        dataEventHandler: null //websocket发过来的数据的节点\r\n    },\r\n\r\n    dispatchEvent(event, data) {\r\n        if (this.dataEventHandler) {\r\n            this.dataEventHandler.emit(event, data);\r\n        }\r\n    },\r\n    initHandlers: function() {\r\n        cc.log(\"==>WebSocketManager initHandlers\");\r\n        //获取TOKEN\r\n        th.ws.addHandler(\"getToken\", data => {\r\n            cc.log(\"===>>>WebSocketManager getToken:\", JSON.stringify(data));\r\n            this.dispatchEvent(\"getToken\", data);\r\n            let { result, result_message, data: rdata } = data;\r\n            if (result != 0) {\r\n                th.wc.hide();\r\n                th.alert.show(\"提示\", result_message);\r\n                return;\r\n            }\r\n            th.token = rdata.t;\r\n            let params = {\r\n                operation: \"makeSign\",\r\n                data: {\r\n                    timestamp: \"1554910784\",\r\n                    token: rdata.t\r\n                }\r\n            };\r\n            th.ws.send(JSON.stringify(params));\r\n            th.wc.show(\"正在获生成签名...\");\r\n        });\r\n\r\n        //模拟生成签名(获取用户信息)\r\n        th.ws.addHandler(\"makeSign\", data => {\r\n            cc.log(\"===>>>WebSocketManager makeSign:\", JSON.stringify(data));\r\n            this.dispatchEvent(\"makeSign\", data);\r\n            let { result, result_message, data: rdata } = data;\r\n            if (result != 0) {\r\n                th.wc.hide();\r\n                th.alert.show(\"提示\", result_message);\r\n                return;\r\n            }\r\n            th.sign = rdata.sign;\r\n            let params = {\r\n                operation: \"pullUserInfo\",\r\n                data: {\r\n                    timestamp: \"1554910784\",\r\n                    token: th.token,\r\n                    sign: rdata.sign\r\n                }\r\n            };\r\n            th.ws.send(JSON.stringify(params));\r\n            th.wc.show(\"正在用户信息...\");\r\n        });\r\n\r\n        //4. 获取用户信息\r\n        th.ws.addHandler(\"pullUserInfo\", data => {\r\n            cc.log(JSON.stringify(data));\r\n            this.dispatchEvent(\"pullUserInfo\", data);\r\n            let { result, result_message, data: rdata } = data;\r\n            if (result != 0) {\r\n                th.wc.hide();\r\n                th.alert.show(\"提示\", result_message);\r\n                return;\r\n            }\r\n            th.wc.show(\"正在加载游戏...\");\r\n            th.myself.id = rdata.account_id;\r\n            th.myself.name = rdata.nickname;\r\n            cc.director.loadScene(\"Hall\", () => {\r\n                th.wc.hide();\r\n            });\r\n        });\r\n\r\n        //连接成功初始化信息\r\n        th.ws.addHandler(\"getUserInfo\", data => {\r\n            cc.log(\"===>>>WebSocketManager getUserInfo:\", JSON.stringify(data));\r\n            this.dispatchEvent(\"getUserInfo\", data);\r\n        });\r\n\r\n        //断线\r\n        th.ws.addHandler(\"disconnect\", data => {\r\n            cc.log(\"===>>>WebSocketManager 断开连接\");\r\n        });\r\n    },\r\n\r\n    connectServer: function({ ip, port, namespace }) {\r\n        cc.log(th.ws.connected);\r\n        th.ws.ip = ip;\r\n        th.ws.port = port;\r\n        th.ws.addr = `ws://${ip}:${port}/${namespace}`;\r\n        th.ws.connect(\r\n            () => {\r\n                this.dispatchEvent(\"connect_success\");\r\n                cc.log(\"==>WebSocketManager 连接成功\");\r\n                let params = {\r\n                    operation: \"getToken\",\r\n                    data: { code: th.args.code }\r\n                };\r\n                th.ws.send(JSON.stringify(params));\r\n                th.wc.show(\"正在获取TOKEN...\");\r\n            },\r\n            () => {\r\n                cc.log(\"==>WebSocketManager 连接失败\");\r\n                th.alert.show(\"提示\", \"连接失败\");\r\n            }\r\n        );\r\n    }\r\n});\r\n"]}